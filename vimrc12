set nocompatible
filetype off

set shell=/bin/bash
set rtp+=~/.vim/bundle/vundle
call vundle#rc()
"call vundle#begin()

Plugin 'gmarik/vundle'

" nerdtree.git allows you to explore your filesystem and to open files and directories
Plugin 'scrooloose/nerdtree.git'

"AutoComplPop completions when you enter characters or move the cursor in Insert mode appears on the site
Plugin 'AutoComplPop'
" or should try neocomplete

" allows for easy commenting of code for many filetypes.
Plugin 'The-NERD-Commenter'
" might not be used now
Plugin 'winmanager'
"Buffergator is a plugin for listing, navigating between, and selecting buffers to edit
Plugin 'Buffergator'
Plugin 'cscope.vim'  

" to highlight syntax
Plugin 'c.vim'
Plugin 'c-standard-functions-highlight'
Plugin 'TagHighlight'
" looks for hex codes of the format #ffffff or #fff and toggles a highlight in that color
"Plugin 'hexHighlight.vim'

"Rich text" highlighting (colors, underline, bold, italic, etc...)
"Plugin 'Highlighter.vim'

" cpp template
Plugin 'vim-templates'


" taglist is obselete, use tagbar instead
"Plugin 'taglist.vim'

" Most Recent Used files 
Plugin 'mru.vim'
Plugin 'Mark'
Plugin 'OmniCppComplete'
Plugin 'snipMate'

"for script developer
"Plugin 'genutils'

"Plugin 'LookupFile'

"A few of quick commands to swtich between source files and header files
Plugin 'a.vim'

"creating a sidebar that displays the ctags-generated tags of the current file
Plugin 'Tagbar'

"a syntax checking plugin
Plugin 'Syntastic'

"displays hierarchical C language call-trees for functions or files using a Cscope database
Plugin 'CCTree'

Plugin 'bufexplorer.zip'
"Plugin 'minibufexplorerpp'
"Plugin 'minibufexpl.vim'

" to max/min current window
Plugin 'zoomwin'

" a terminal emulator which uses a Vim buffer to display the program output, might not use now
"Plugin 'Conque-shell'

" it seems something wrong here, below 3 are not usable now
Plugin 'ag.vim'
Plugin 'grep.vim'
Plugin 'mileszs/ack.vim'

" show colorful parenthesis
Plugin 'luochen1990/rainbow'

" to show colorful status line
Plugin 'bling/vim-airline'

"the best Git wrapper , might not use now
"Plugin 'fugitive.vim'

"Full path fuzzy file, buffer, mru, tag, ... finder, might not use now
"Plugin 'Ctrlp.vim'

""""""""" changesPlugin will disable open .gz file
"""""""Plugin 'chrisbra/changesPlugin'

" to browser hackernews using vi
Plugin 'ryanss/vim-hackernews'

"need to memorize many commands, might not use now
"Plugin 'easymotion/vim-easymotion'

" to show marks
"Plugin 'kshenoy/vim-signature'

"for opening files and buffers, https://github.com/wincent/Command-T
"Plugin 'wincent/command-t'

" for faster navigating in file, might not use now
"Plugin 'goldfeld/vim-seek'

"Plugin 'autoload_cscope.vim'

" improved c++11 syntax highlighting
Plugin 'octol/vim-cpp-enhanced-highlight'

" to use doxygen format comment
Plugin 'DoxygenToolkit.vim'
Plugin 'close-duplicate-tabs'

" to use surround to quickly put parenthesis around a word
Plugin 'surround.vim'

" to diff and merge two directories recursively
Plugin 'DirDiff.vim'

" turn filetype functionality back on
filetype plugin indent on

" Syntax highlighting.
syntax on
"enable 256 colors in vim
set t_Co=256
" Setting colorscheme
colorscheme mycolor
"set background=light

set background=dark
"colorscheme solarized

" Other settings.
set   autoindent
set   autoread
set   autowrite
"set   background=dark
set   backspace=indent,eol,start
set   nobackup
set   cindent
set   cinoptions=:0
set   cursorline cursorcolumn
set   completeopt=longest,menuone
set   noexpandtab
set   fileencodings=utf-8,gb2312,gbk,gb18030
set   fileformat=unix
set   foldenable
set   foldmethod=marker
set   guioptions-=T
set   guioptions-=m
set   guioptions-=r
set   guioptions-=l
set   helpheight=10
set   helplang=cn
set   hidden
set   history=100
set   hlsearch
set   ignorecase
set   incsearch
set   laststatus=2
"set	  statusline+=%F
" Format the status line, might not use now
set   statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l
set   mouse=a
set   number
set   relativenumber
set   pumheight=10
set   ruler
set   scrolloff=5
set   shiftwidth=4
set   showcmd
set   smartindent
set   smartcase
set   tabstop=4
set   termencoding=utf-8
set   textwidth=80
set   whichwrap=h,l
set   wildignore=*.bak,*.o,*.e,*~
set   wildmenu
set   wildmode=list:longest,full
set   nowrap
set   noswapfile
set   nocscopeverbose
set   clipboard=unnamedplus
set   fillchars+=stl:\ ,stlnc:\
set   confirm


if &term =~ "xterm\\|rxvt"
	" use an orange cursor in insert mode
	let &t_SI = "\<Esc>]12;orange\x7"
	"     " use a red cursor otherwise
	let &t_EI = "\<Esc>]12;red\x7"
	silent !echo -ne "\033]12;red\007"
	"           " reset cursor when vim exits
	autocmd VimLeave * silent !echo -ne "\033]112\007"
	"               " use \003]12;gray\007 for gnome-terminal and rxvt up to version 9.21
endif
	  "
"define cursor color, not working
"autocmd InsertEnter * set cul
"autocmd InsertLeave * set nocul

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" Return to last edit position when opening files (!!!!sudo chmod a+rw ~/.viminfo!!!!)
if has("autocmd")
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
endif
" Remember info about open buffers on close
set viminfo^=%



" AUTO COMMANDS: {{{1
" auto expand tab to blanks
"autocmd FileType c,cpp set expandtab

" SHORTCUT SETTINGS: {{{1
" Set mapleader
let mapleader=","
" Space to command mode.
nnoremap <space> :
vnoremap <space> :
" Switching between buffers.
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
inoremap <C-h> <Esc><C-W>h
inoremap <C-j> <Esc><C-W>j
inoremap <C-k> <Esc><C-W>k
inoremap <C-l> <Esc><C-W>l
" "cd" to change to open directory.
let OpenDir=system("pwd")
nmap <silent> <leader>cd :exe 'cd ' . OpenDir<cr>:pwd<cr>

" 
" PLUGIN SETTINGS: {{{1

" NERDTree.vim
let g:NERDTreeWinPos="right"
let g:NERDTreeWinSize=35
let g:NERDTreeShowLineNumbers=1
let g:NERDTreeQuitOnOpen=1

"mark.vim
let g:mwDefaultHighlightingNum=18
let g:mwDefaultHighlightingPalette = 'maximum'
let g:mwAutoSaveMarks=0
let g:mwIgnoreCase=0

"mark.vim
nmap <silent> <leader>hl <Plug>MarkSet
vmap <silent> <leader>hl <Plug>MarkSet
nmap <silent> <leader>hh <Plug>MarkClear
vmap <silent> <leader>hh <Plug>MarkClear

" cscope.vim
if has("cscope")
	set csprg=/usr/bin/cscope
    set csto=1
    set cst
    set nocsverb
    if filereadable("cscope.out")
		cs add $PWD/cscope.out
" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
"		echom $CSCOPE_DB
"		sleep 500
"		cs add $CSCOPE_DB
    endif
"	cs add /home/user/cscope/mib2v7_fw5.31.22/cscope.out /home/user/
"	if (set csverb) is enabled, then the search results will be displayed twice
"	in quickfix window!!!!!
"    set csverb
endif

" OmniCppComplete.vim
let g:OmniCpp_DefaultNamespaces=["std"]
let g:OmniCpp_MayCompleteScope=1
let g:OmniCpp_SelectFirstItem=2


if executable('ag')
	set grepprg=ag\ --nogroup\ --color\ --column\ $*
	set grepformat=%f:%l:%c%m
endif

"Syntastic.vim
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_cpp_compiler = "g++"

"enable cctree feature(it's 0 by default)
let CCTreeEnhancedSymbolProcessing = 1

" plugin shortcuts
function! RunShell(Msg, Shell)
	echo a:Msg . '...'
	call system(a:Shell)
	echon 'done'
endfunction

"plugin rainbow
let g:rainbow_active = 1

let g:rainbow_load_separately = [
    \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
    \ [ '*.{cpp,c,cc}' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
    \ ]

let g:rainbow_guifgs = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']

"for airline
if !exists('g:airline_symbols')
      let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_theme = 'behelit'
"show full path in statusline
let g:airline_section_c = airline#section#create(['%F'])

"set tagbar on left side, by default it is on right
let g:tagbar_left = 1
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
"let g:tagbar_autopreview = 1

" configure for DoxygenToolkit
let g:DoxygenToolkit_commentType = "C++"

" for cpp-enhanced-highlight
let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1
"vim-cpp-enhanced-highlight ,Vim tend to a have issues with flagging braces as errors, workaround
let no_curly_error=1

" set for dir diff plugin
"Sets default exclude pattern:
let g:DirDiffExcludes = "CVS,*.class,*.exe,.*.swp,.*.git,*.png,*.PNG"
"  Sets default ignore pattern:
let g:DirDiffIgnore = "Id:,Revision:,Date:"

" discard taglist, use tagbar instead.
"nmap  <F2> :TlistToggle<cr>

" use <F3> if also use taglist
nmap  <F2> :Tagbar<cr>
nmap  <F3> :NERDTreeToggle<cr>
nmap  <F4> :MRU<cr>
"nmap  <F5> <Plug>LookupFile<cr>
"nmap  <F6> :vimgrep /<C-R>=expand("<cword>")<cr>/ **/*.c* **/*.h*<cr><C-o>:cw<cr>
nmap  <F6> :vimgrep /<C-R>=expand("<cword>")<cr>/ /home/user/workspace/svn/mxx2_git/google/**/**/*.c* /home/user/workspace/svn/mxx2_git/google/*.h*<cr><C-o>:cw<cr>
"nmap  <F9> :call RunShell("Generate tags", "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .")<cr>
"nmap  <F7> :Tagbar<cr>
"nmap <F10> :call HLUDSync()<cr>
"nmap <F12> :call RunShell("Generate filename tags", "~/.vim/shell/genfiletags.sh")<cr>
"nmap <F12> :call RunShell("Generate cscope", "cscope -Rb")<cr>:cs add cscope.out<cr>

"set enter to insert one blank line
map <F8> o<ESC>
" open a new tab then difination
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
"create scope database
"nmap <leader>sa :cs add cscope.out<cr>

"find all references to a symbol: function, macros, enums, etc
nmap <leader>ss :cs find s <C-R>=expand("<cword>")<cr><cr>
"find difination of functions, macros, enums, etc
nmap <leader>sg :cs find g <C-R>=expand("<cword>")<cr><cr>
"find who calling this function
nmap <leader>sc :cs find c <C-R>=expand("<cword>")<cr><cr>
"nmap <leader>sc :cs find c <C-R>=expand("<cword>") /home/user/workspace/svn/mib2_git/gemib/<cr><cr>
"find this text string
nmap <leader>st :cs find t <C-R>=expand("<cword>")<cr><cr>
"egrep
nmap <leader>se :cs find e <C-R>=expand("<cword>")<cr><cr>
"find and 0pen the current file
nmap <leader>sf :cs find f <C-R>=expand("<cfile>")<cr><cr>
"find files that #including this file
nmap <leader>si :cs find i <C-R>=expand("<cfile>")<cr><cr>
"find functions called by this function
nmap <leader>sd :cs find d <C-R>=expand("<cword>")<cr><cr>

nmap <leader>zz <C-w>o
nmap <leader>gs :GetScripts<cr>


"set ctags for all files to avoid typing in set tags=/xx/tags each time
set tags=$PWD/tags;
set autochdir
