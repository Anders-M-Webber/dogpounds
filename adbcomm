0. adb root   # get permission
0.1 adb unroot
==================about android service=============
1. adb shell service list     # list all service names and package names
2. adb shell service check <service>   # <don't know how to use> found <service> or not, 
3. adb shell dumpsys <service>   # more details 
4. adb shell dumpsys activity <services>  # all details

=================call pm (Package Manager)=======http://www.cnblogs.com/JianXu/p/5380882.html===========
5. adb shell pm list packages -f   #list all installed apks, see their associated file.
    -d   Filter to only show disabled packages.
    -e    Filter to only show enabled packages.
    -s     Filter to only show system packages.
    -3    Filter to only show third party packages.
    -i    See the installer for the packages.
    -u     Also include uninstalled packages.
   --user <USER_ID>     The user space to query.

10. adb shell pm dump PACKAGE_NAME | grep -A 1 MAIN    # found out the main activity or
  10.1 adb shell dumpsys package | grep -i " + (enter package name)  + " | grep Activity

10.2  adb shell pm path <PACKAGE>    # Print the path to the APK of the given <PACKAGE>.
   e.g, adb shell pm path com.android.phone    # package:/system/priv-app/TeleService/TeleService.apk

10.3   adb shell pm clear <PACKAGE>    #Deletes all data associated with a package.
   e.g,    adb shell pm clear com.test.abc    #clearing app data, cache
   
===============call am (Activity Manager)===========
9. adb shell am start -n com.package.name/com.package.name.ActivityName   # to launch an activity
  - adb shell am start -n <package_name>/.<activity_class_name>

=====================about activity==========
11. adb shell dumpsys activity services # list all serivces
12. adb shell dumpsys activity services myservices # list all serivces that contain myservice in its name

#9.1-9.3 get launchable activity name of package
 9.1 adb shell pm list packages -f
 9.2 adb pull <APK path from 9.1>
 9.3 aapt dump badging <pulledfile.apk>

===========aapt (Android Asset Package tool)======http://elinux.org/Android_aapt=============
1. aapt l[ist] [-v] [-a] file.{zip,jar,apk}
   -v:    output as a table
   -a:　　　output all infor

2. aapt d[ump] [--values] WHAT file.{apk} [asset [asset ...]]
   badging          Print the label and icon for the app declared in APK.
   permissions      Print the permissions from the APK.
   resources        Print the resource table from the APK.
   configurations   Print the configurations in the APK.
   xmltree          Print the compiled xmls in the given assets.
   xmlstrings       Print the strings of the given compiled xml assets.

3. aapt r[emove] [-v] file.{zip,jar,apk} file1 [file2 ...]
     Delete specified files from Zip-compatible archive.

4. aapt a[dd] [-v] file.{zip,jar,apk} file1 [file2 ...]
    Add specified files to Zip-compatible archive.

5. aapt v[ersion]
   Print program version.
================= misc================
13. adb get-serialno 
    - adb get-product     # list all adb commands
    - adb shell cat /proc/cpuinfo
    - adb shell top [-m 6] # only list top 6 processes 
    - adb shell cat /proc/meminfo
    - adb shell cat /proc/iomem
    - adb push <local> <remote>  # copy local file to remote device
    - adb pull <remote>  <local>   # copy remote file to local
    - adb remount    # mount system partition to read/write 
    - adb shell du  # show folder's size 
    - adb shell ls [ -i -s -n ] 
           # -i print index number of each file, -s print size of each file, in blocks, -n list numeric UIDs and GIDs
    - adb shell [date] [busybox] [cp] [mv] [pwd] [touch] [mkdir] [cd] [rename] [rm] [chmod] [cat] [ps] [top]
    - adb shell cat /data/misc/wifi/*.conf
    - adb logcat [-c] [-v long]
    - adb bugreport
    - adb shell cat /system/build.prop
    - adb shell monkey -v -p your.package.name 500

14. adb reboot bootloader
15. adb reboot recovery
16. adb kill-server  / adb start-server     # terminates/start the adb server process
17. adb shell cat /sys/class/net/wlan0/address
18. adb install [-r -s -l -t -p] apk 
   # -r reinstall but save cache/data; 
     -s install to SD card; 
     -l forward lock apk; 
     -t allow test apk; 
     -d allow version code downgrade;
     -p partial application install
19. adb uninstall [-k] apk       # -k Keep the data and cache directories around after package removal.

================= network===============
21. adb forward <local> <remote>   # forward socket connections
    - e.g ,  adb forward tcp:8000 tcp:9000      #set up forwarding of host port 8000 to emulator/device port 9000

22. adb connect <host>[:<port>]    # use ADB over Wi-Fi
STEP 1.   Connect to the device over USB.
STEP 2.   adb devices
STEP 3.   adb tcpip 5555   # restarting in TCP mode port: 5555
STEP 4.   Find out the IP address of the Android device
STEP 5.   adb connect #.#.#.#          #connected to #.#.#.#:5555
STEP 6.   Remove USB cable from device, and confirm you can still access device: adb devices

23.  adb usb    # restarting ADB in USB mode.
24.  adb shell netstat  # network statistics
25.  adb shell netcfg [<interface> {dhcp|up|down}]   #configure and manage network connections via profiles
26.  adb shell ip   #show, manipulate routing, devices, policy routing and tunnels
     ip [ OPTIONS ] OBJECT
    OBJECT := { link | addr | addrlabel | route | rule | neigh | ntable |tunnel | tuntap |
               maddr | mroute | mrule | monitor | xfrm |netns | l2tp }
    OPTIONS := { -V[ersion] | -s[tatistics] | -d[etails] | -r[esolve] 
                |-f[amily] { inet | inet6 | ipx | dnet | link } |-l[oops] { maximum-addr-flush-attempts } 
                |-o[neline] | -t[imestamp] | -b[atch] [filename] |-rc[vbuf] [size]}
      e.g, adb shell ip -f inet addr   # show wlan0 show WiFi IP Address

===============================logcat ============
adb logcat [option] [filter-specs]  # Prints log data to the screen.

adb logcat *:V lowest priority, filter to only show Verbose level
adb logcat *:D | grep -i here         filter to only show Debug level
adb logcat *:I filter to only show Info level
adb logcat *:W filter to only show Warning level
adb logcat *:E filter to only show Error level
adb logcat *:F filter to only show Fatal level
adb logcat *:S Silent, highest priority, on which nothing is ever printed

adb logcat -b <Buffer>

adb logcat -b radio    # View the buffer that contains radio/telephony related messages.
adb logcat -b event    #View the buffer containing events-related messages.
adb logcat -b main     #default
adb logcat -c          #Clears the entire log and exits.
adb logcat -d          #Dumps the log to the screen and exits.
adb logcat -f test.logs     # Writes log message output to test.logs .
adb logcat -g               # Prints the size of the specified log buffer and exits.
adb logcat -n <count>       # Sets the maximum number of rotated logs to <count>. 
                            #    Notes: The default value is 4. Requires the -r option.
adb logcat -r <kbytes>       #Rotates the log file every <kbytes> of output.
                            #Notes: The default value is 16. Requires the -f option.
adb logcat -s               # Sets the default filter spec to silent.

adb logcat -v <format>
adb logcat -v brief       #Display priority/tag and PID of the process issuing the message (default format).
adb logcat -v process     #Display PID only.)
adb logcat -v tag          #Display the priority/tag only.
adb logcat -v raw          #Display the raw log message, with no other metadata fields.
adb logcat -v time           #Display the date, invocation time, priority/tag, and PID of the process issuing the message.
adb logcat -v threadtime    #Display the date, invocation time, priority, tag, and the PID and TID of the thread issuing the message.
adb logcat -v long           #Display all metadata fields and separate messages with blan

================dumpsys========
adb shell dumpsys [options]         # dumps system data

adb shell dumpsys meminfo
adb shell dumpsys battery
adb shell dumpsys batterystats   # collects battery data from your device
   # STEP 1 adb shell dumpsys batterystats > batterystats.txt STEP 2 python historian.py batterystats.txt > batterystats.html
adb shell dumpsys batterystats --reset    #erases old collection data
adb shell dumpsys activity
adb shell dumpsys gfxinfo com.android.phone     # measuring com.android.phone ui performance

adb shell dumpstate
===============================recoder================
adb shell screencap <filename>   # taking a screenshot of a device display.
       e.g. adb shell screencap /sdcard/screen.png

adb shell screenrecord [options] <filename>  #recording the display of devices running Android 4.4 (API level 19) and higher.
   e.g,  adb shell screenrecord /sdcard/demo.mp4 , 
   Notes: Stop the screen recording by pressing Ctrl-C, 
       otherwise the recording stops automatically at three minutes or the time limit set by --time-limit.

adb shell screenrecord --size <WIDTHxHEIGHT>   # Sets the video size: 1280x720.
            The default value is the device's native display resolution (if supported), 1280x720 if not.
            For best results, use a size supported by your device's Advanced Video Coding (AVC) encoder.
adb shell screenrecord --bit-rate <RATE>  # Sets the video bit rate for the video, in megabits per second.
           The default value is 4Mbps. You can increase the bit rate to improve video quality, 
           but doing so results in larger movie files.
           The following example sets the recording bit rate to 5Mbps: adb shell screenrecord --bit-rate 5000000 /sdcard/demo.mp4

adb shell screenrecord --time-limit <TIME>  #Sets the maximum recording time in seconds. The default and maximum value is (3 minutes).
adb shell screenrecord --rotate   #Rotates the output 90 degrees. This feature is experimental.
adb shell screenrecord --verbose   # Displays log information on the command-line screen. 
              If you do not set this option, the utility does not display any information while running.


===========system=========
30. adb sideload <update.zip>  # flashing/restoring Android update.zip packages.
31. adb shell setprop
32. adb shell setprop <service.adb.tcp.port 5555>

========misc========
adb devices -l
adb shell dmesg   # print kernel debug message to screen
adb shell cmd package dump-profiles <package>  # To produce a text form of the profile information


============fastboot============
　　fastboot erase system #擦除system分区
　　fastboot erase boot #擦除boot分区
　　fastboot erase cache #擦除cache分区
　　fastboot erase userdata #擦除userdata分区

　　fastboot flash system system.img #写入system分区
　　fastboot flash boot boot.img #写入boot分区
　　fastboot flash recovery recovery.img
　　fastboot flash radio radio.img
  
　　fastboot reboot #重启手机
　　fastboot reboot-bootloader #重启到bootloader模式
　　fastboot oem rebootRUU #重启到HTC RUU刷机模式

　　华为解锁命令：fastboot oem unlock ***************(***代表imei);
　　HTC解锁命令：fastboot flash unlocktoken unlock_code.bin(需事先申请解锁文件);
 
　　　fastboot getvar cid  #　查看CID
 　　fastboot oem writecid 11111111  #　　修改超级CID(需要S-OFF)
